1.1.4/1.0.5 - March 12, 2012
============================
* Introduced a parent interface for Queues so that they can have some common methods

* Added new Recipe: DistributedIdQueue - a version of DistributedQueue that allows IDs to be
associated with queue items. Items can then be removed from the queue if needed.

* Curator can now be configured to poll a cluster of Exhibitor (https://github.com/Netflix/exhibitor)
instances to get the connection string to use with the ZooKeeper client. Should the connection
string change, any new connections will use the new connection string.

1.1.3/1.0.4 - March 7, 2012
===========================
* Issue 27: This bug exposed major problems with the PathChildrenCache. I ended up completely
rewriting it. The original version was very inefficient and prone to herding. This new version
is as efficient as possible and adds some nice new features. The major new feature is that when
calling start(), you can have the cache load an initial working set of data.

* Issue 31: It turns out an instance of InterProcessMutex could not be shared in multiple threads. My
assumption was that users would create a new InterProcessMutex per thread. But, this restriction is
arbitrary. For comparison, the JDK Lock doesn't have this requirement. I've fixed this however it
was a significant change internally. I'm counting on my tests to prove correctness.

* EnsurePath wasn't doing its work in a RetryLoop.

* Added a new class to the Test module, Timing, that is used to better coordinate timings in tests

* LockInternals had a retry loop for all failures when it was only needed if the session expired
and the lock node was lost. So, I refined the code to handle this specific case.

* Issue 34: PathChildrenCache should ensure the path

* Moved to Guava 11.x

* Lots of work on the Gradle build. NOTE: Gradle will soon become the build system for Curator

1.1.2/1.0.3 - Feb. 8, 2012
==========================
* Added listener to Queues to listen for put completion

* Issue 24: If InterProcesMutex.release() failed to delete the node (due to connection errors, etc.)
the instance was left in an inconsistent state that would cause a future call to acquire() to
succeed without actually creating the lock. A new feature (see next bullet) was added to solve this
problem: guaranteed deletes. The various lock-based recipes now use this feature.

* New feature: guaranteed deletes. The delete builder now has a method that will record failed node
deletions and attempt to delete them in the background until successful. NOTE: you will still get
an exception when the deletion fails. But, you can be assured that as long as the CuratorFramework
instance is open attempts will be made to delete the node:
    client.delete().guaranteed() ...

1.1.1/1.0.2 - Jan. 21, 2012
===========================
* Issue 22: Make ServiceCache close itself down properly.

* Issue 21: Move TestNG to the top-level pom and define its scope as test

* Issue 17: ConnectionStateManager should use the builder's thread factory if present

1.1.0 - Jan. 5, 2012
=====================
* 1.1.x marks a separate branch of Curator:
    - 1.0.x will stay compatible with ZooKeeper 3.3.x
    - 1.1.x+ will require ZooKeeper 3.4.x+

* Added support for ZooKeeper 3.4's Transactions:
    - CuratorFramework has a new method: inTransaction() that starts a
      transaction builder
    - See TestTransactions for examples

1.0.1 - Jan. 4, 2012
=====================
* Updated and tested against ZooKeeper 3.4.2

1.0.0 - Dec. 31, 2011
=====================
* Added a REST server for Service Discovery
* Switched to slf4j for logging
* Moved to 1.0 version
* Curator is now feature complete

0.6.4 - Dec. 7, 2011
=====================
* Added Barrier

* Added Double Barrier

* Added Read/Write lock

* Added revocation to InterProcessMutex

* Fixed (hopefully) intermittent failures with testRetry()

* Updates/enhancements to Discovery based on suggestions from Eishay Smith

0.6.3 - Nov. 30, 2011
=====================
* Added Service Discovery

0.6.1 - Nov. 18, 2011
=====================
* Added new methods to LeaderSelector to identify/get all Participants

* Moved to ZooKeeper 3.3.3

* Made the TestingCluster not throw an assertion error due to internal JMX registrations
in ZK. This is done with Javaassist ugliness.

* Refactored listeners in Curator to a common methodology

* Major changes to error handling. Adding a ConnectionStateManager that allows users to
listen for connection changes. Connection loss is first treated as a recoverable Suspension.
If the connection is not re-established, the state changes to connection loss. Any recipes
that are affected by this have been updated.

* PathChildrenCache now handles connection state changes much better.

* All Curator created threads now have a meaningful name.

0.5.2 - Nov. 14, 2011
=====================
* Jérémie Bordier posted on the ZK mailing list about a split brain issue with the Leader Selector.
If the Leader is connected to a server that suffers a network partition, it needs to get notified
that it has lost leadership. Curator handled this somewhat but only if the client application
executed periodic ZooKeeper operations. I've enhanced the CuratorFramework implementation to check
for disconnection and executed a background sync (with retries). This will cause any listener's
unhandledError() method to get called when there is a network partition.

* New utility: TestingCluster. Allows for testing with an in-memory ZK ensemble.

* Reworked distributed atomic implementations. I was unhappy with the complexity of the previous
one. Now, there's a simpler master implementation DistributedAtomicValue that is the basis for the
others. Adding new versions should be simpler as well.

0.5.1 - Nov. 12, 2011
=====================
* Another pass at fixing the semaphore. Went back to the model of the count being merely a
convention. Added a new recipe for a SharedCount that can be used in place of the count convention
with the semaphore. This is the best of both worlds. The semaphore code is a lot simpler and will
perform better. Thanks to Monal Daxini for the idea.
